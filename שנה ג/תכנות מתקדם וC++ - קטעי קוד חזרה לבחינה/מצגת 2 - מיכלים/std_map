#include <vector>
#include <string>
#include <iostream>
#include <deque>
#include <deque>
#include <unordered_map>
#include <map>

/** Written By Zvi Mints - zvimints@gmail.com **/
/** Powerpoint 3 **/
/**
 * אוסף של זוגות מפתח-ערך.
חיפוש מהיר של ערך לפי המפתח
Map :קבוצה של מפתח:ערך יחודיים ממויינים <
Map Multi : קבוצה של מפתח:ערך ממויינים <
Map_ Unordered : קבוצה של מפתח:ערך יחודיים
 חיפוש ברשימה אינו יעיל, מחיר החיפוש הוא )O(n
• מפה היא עץ חיפוש מאוזן, ומחיר החיפוש הוא ))O(log(n
 */
int main() {
    std::unordered_map<double,std::string> m_uo = { {1,"A"}, {1,"B"}, {1,"B"}, {2.5,"C"}, {1.2,"C"} }; // Unorder
    std::map<double,std::string> m_reg = { {1,"A"}, {1,"B"}, {1,"B"}, {2.5,"C"}, {1.2,"C"} }; // Ordered + Without Coppies
    std::multimap<double,std::string> m_ms = { {1,"A"}, {1,"B"}, {1,"B"}, {2.5,"C"}, {1.2,"C"} }; // With Coppies
// m_uo = (1.2,C) (2.5,C) (1,A)
// m_reg = (1,A) (1.2,C) (2.5,C)
// m_ms = (1,A) (1,B) (1,B) (1.2,C) (2.5,C)
// Will NOT add
    m_reg.insert(std::make_pair(1,"Hey"));
// Will ADD
    m_reg.insert(std::make_pair(5,"Sup"));
// (1,A) (1.2,C) (2.5,C) (5,Sup)
// m_reg = (1,A) (1.2,C) (2.5,C)
    std::cout << m_reg[1] << std::endl; // A
// Change
    m_reg[1] = "Chaning";
    std::cout << m_reg[1] << std::endl; // Chaning
    std::cout << m_reg.at(1) << std::endl; // Chaning
    std::cout << m_reg[100] << std::endl; // Created with no value!!!!!
    std::cout << m_reg.at(100) << std::endl; // throws an error or because the above line it will work and return empty
// Print
    for(std::map<double,std::string>::iterator it = m_reg.begin(); it != m_reg.end(); it++) {
        std::cout << "(" << it->first << "," << it->second << ") ";
    }
    std::cout << std::endl;
// Or:
    std::for_each(m_reg.begin(),m_reg.end(),[](const std::pair<double,std::string> & p)
    { std::cout << "(" << p.first << "," << p.second << ")" << " "; }); std::cout << std::endl;
    return 0;
}